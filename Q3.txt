import boto3
import csv
import sqlite3
from io import StringIO
import json
import sqlite3
import logging



#########1.ETL Process (AWS Lambda Function - Python3) :

def lambda_handler(event, context):
    csv_files = ['sales1.csv', 'sales2.csv']
    extracted_data = extract_from_csv(csv_files)
    transformed_data = transform_data(extracted_data)
    db_file = 'imed/tmp/sales_database.db'
    load_to_database(transformed_data, db_file)
    
    print("ETL pipeline completed successfully!")

def extract_from_csv(files):
    data = []
    for file in files:
        with open(file, 'r', newline='') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                data.append(row)
    return data

def transform_data(data):
    transformed_data = []
    for row in data:
        total_price = float(row['Quantity']) * float(row['UnitPrice'])
        row['TotalPrice'] = total_price
        transformed_data.append(row)
    return transformed_data

def load_to_database(data, db_file):
    conn = sqlite3.connect(db_file)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS sales
                 (InvoiceNo TEXT, StockCode TEXT, Description TEXT, Quantity INTEGER, UnitPrice REAL, TotalPrice REAL)''')
    for row in data:
        c.execute("INSERT INTO sales VALUES (?, ?, ?, ?, ?, ?)",
                  (row['InvoiceNo'], row['StockCode'], row['Description'], row['Quantity'], row['UnitPrice'], row['TotalPrice']))
    conn.commit()
    conn.close()

#########2.API Layer (AWS Lambda Function + API Gateway - Python3) :

def lambda_handler(event, context):
    conn = sqlite3.connect('imed/tmp/sales_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM sales LIMIT 10')
    data = cursor.fetchall()
    cursor.close()
    conn.close()
    
    response_body = [{'InvoiceNo': row[0], 'StockCode': row[1], 'Description': row[2],
                      'Quantity': row[3], 'UnitPrice': row[4], 'TotalPrice': row[5]} for row in data]
    
    return {
        'statusCode': 200,
        'headers': {
            'Content-Type': 'application/json'
        },
        'body': json.dumps
(response_body)
}

##########3.Stockage des Logs (AWS CloudWatch) :

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    logger.info('ETL pipeline completed successfully!')

#########4.Stockage de Fichiers (AWS S3) :

def upload_file_to_s3(file_path, bucket_name, object_name):
    s3_client = boto3.client('s3')
    s3_client.upload_file(file_path, bucket_name, object_name)

upload_file_to_s3('local_file.csv', 's3-bucket', 'uploaded_file.csv')

#######5.Sécurité (IAM et AWS Secrets Manager) :

iam = boto3.client('iam')
s3_policy = {
    "Version": "2012-10-17",
    "Statement": [{
        "Effect": "Allow",
        "Action": ["s3:GetObject"],
        "Resource": ["arn:aws:s3:::s3-bucket/*"]
    }]
}

iam.create_policy(
    PolicyName='S3ReadOnlyPolicy',
    PolicyDocument=json.dumps(s3_policy)
)

iam.create_role(
    RoleName='LambdaS3Role',
    AssumeRolePolicyDocument=json.dumps({
        "Version": "2012-10-17",
        "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": "lambda.amazonaws.com"},
            "Action": "sts:AssumeRole"
        }]
    })
)

iam.attach_role_policy(
    RoleName='LambdaS3Role',
    PolicyArn='arn:aws:iam::your-account-id:policy/S3ReadOnlyPolicy'
)

###########6.Surveillance et Alertes (AWS CloudWatch) :

cloudwatch = boto3.client('cloudwatch')
cloudwatch.put_metric_alarm(
    AlarmName='LambdaErrorsAlarm',
    AlarmDescription='Alarm when Lambda function errors occur',
    ActionsEnabled=True,
    AlarmActions=[
        'arn:aws:sns:your-region:your-account-id:topic-name'
    ],
    MetricName='Errors',
    Namespace='AWS/Lambda',
    Statistic='Sum',
    Period=300,
    EvaluationPeriods=1,
    Threshold=1,
    ComparisonOperator='GreaterThanOrEqualToThreshold',
    Dimensions=[
        {
            'Name': 'LambdaErrorsAlarm',
            'Value': 'lambda_handler'
        }
    ]
)
